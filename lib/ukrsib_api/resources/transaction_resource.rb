# frozen_string_literal: true
# typed: true

module UkrsibAPI
  module Resources
    ##
    # TransactionResource is responsible for fetching transaction data from the API.
    # It supports three endpoints:
    #
    # 1. Standard transactions endpoint (with a date interval).
    # 2. Interim transactions endpoint (for data from the last day up to today).
    # 3. Final transactions endpoint (for final transactions on the last day).
    #
    # Each endpoint is paginated. The methods in this class return an Enumerator that
    # lazily fetches and yields transactions page by page.
    class TransactionResource < UkrsibAPI::Resource
      # TODO: make common method private, or refactor it into a parent class. In all classes

      ##
      # Executes a paginated request for transactions.
      #
      # @param uri [String] the API endpoint URI (e.g., "statements/transactions",
      #   "statements/transactions/interim", or "statements/transactions/final").
      # @param query_params [Hash] the query parameters generated by form_query.
      #
      # @return [Enumerator] an enumerator that yields each transaction as it is fetched.
      def common(uri:, query_params:)
        UkrsibAPI::PaginationHelper
          .paginate(params_hash: query_params, key: "transactions", type: UkrsibAPI::Models::Transaction) do |params|
          get_request(uri, params: params)
        end
      end

      ##
      # Retrieves transactions for a specified date range.
      #
      # This method is used when you need to filter transactions by a start (and optional end) date.
      # @example
      #  transactions = UkrsibAPI::Client.transactions.list(
      #   start_date: Date.new(2025, 2, 1),
      #   end_date:   Date.new(2025, 2, 28),
      #   account:    "UA1234567890",
      #   results_per_page: 50
      # )
      #
      # @param start_date [Date] the starting date (required).
      # @param end_date [Date, nil] the ending date (optional).
      # @param account [String, nil] the account IBAN (optional). If omitted, data for all active accounts are returned.
      # @param next_page_id [String, nil] an identifier for the next page (pagination).
      # @param results_per_page [Integer] number of records per page (default: 20; maximum recommended: 100).
      #
      # @return [Enumerator] an enumerator that yields transaction objects.
      def list(start_date:, end_date: nil, account: nil, next_page_id: nil, results_per_page: 20)
        query_params = form_query(
          start_date:,
          end_date:,
          account:,
          follow_id: next_page_id,
          limit: results_per_page
        )
        common(uri: "statements/transactions", query_params: query_params)
      end

      ##
      # Retrieves interim transactions.
      #
      # Interim endpoints do not require date parameters; they return transactions
      # for the period from the last day to today.
      #
      # @param account [String, nil] the account IBAN (optional).
      # @param next_page_id [String, nil] an identifier for the next page (pagination).
      # @param results_per_page [Integer] number of records per page (default: 20).
      #
      # @return [Enumerator] an enumerator that yields interim transaction objects.
      def list_interim(account: nil, next_page_id: nil, results_per_page: 20)
        query_params = form_query(
          account: account,
          follow_id: next_page_id,
          limit: results_per_page
        )
        common(uri: "statements/transactions/interim", query_params: query_params)
      end

      ##
      # Retrieves final transactions.
      #
      # Final endpoints return transactions for the final (last) day.
      # Like the interim endpoint, date parameters are not required.
      #
      # @param account [String, nil] the account IBAN (optional).
      # @param next_page_id [String, nil] an identifier for the next page (pagination).
      # @param results_per_page [Integer] number of records per page (default: 20).
      #
      # @return [Enumerator] an enumerator that yields final transaction objects.
      def list_final(account: nil, next_page_id: nil, results_per_page: 20)
        query_params = form_query(
          account: account,
          follow_id: next_page_id,
          limit: results_per_page
        )
        common(uri: "statements/transactions/final", query_params: query_params)
      end
    end
  end
end
